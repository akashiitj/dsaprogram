public class Solution {
    /*
     * @param root: the root of binary tree
     * @return: collect and remove all leaves
     */

    static class Pair<U, V>{
        public final U first;
        public final V second;

        private Pair(U first, V second){
            this.first = first;
            this.second = second;
        }
        public static <U, V> Pair <U, V> of(U a, V b){
            return new Pair<>(a, b);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Pair<?, ?> pair = (Pair<?, ?>) o;
            return first.equals(pair.first) && second.equals(pair.second);
        }

        @Override
        public int hashCode() {
            return Objects.hash(first, second);
        }
    }

    public static void main(String []args){
        HashSet<Pair<Integer,Integer>> map = new HashSet<Pair<Integer,Integer>>();
        map.add(Pair.of(4,-3));
        if(map.contains(Pair.of(4,-3)))
            System.out.println("I'm dumb af"); //it prints
    }
}
