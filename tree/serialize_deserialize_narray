// A C++ Program serialize and deserialize an N-ary tree 
#include<bits/stdc++.h> 
#define MARKER ')' 
#define N 5 
using namespace std; 

// A node of N-ary tree 
struct Node { 
char key; 
Node *child[N]; // An array of pointers for N children 
}; 

// A utility function to create a new N-ary tree node 
Node *newNode(char key) 
{ 
	Node *temp = new Node; 
	temp->key = key; 
	for (int i = 0; i < N; i++) 
		temp->child[i] = NULL; 
	return temp; 
} 

// This function stores the given N-ary tree in a file pointed by fp 
void serialize(Node *root, string &s) 
{ 
	if(root==NULL){
      return;
    }
    s += root->key;
  	for(int i=0;i<N;i++){
      serialize(root->child[i],s);
    }
    s+= ")";
} 

// This function constructs N-ary tree from a file pointed by 'fp'. 
// This functionr returns 0 to indicate that the next item is a valid 
// tree key. Else returns 0 
Node* deSerialize(int &i,string s) 
{ 
    if(i>=s.length())
        return NULL;
        
    if(s[i] == ')')
        return NULL;
	
	Node* root = newNode(s[i]); 
	for (int j = 0; j < N; j++){ 
	    i++;
	    Node* n = deSerialize(i,s);
	    if (NULL == n)
		    break;
	    root->child[j] = n; 
	}

	// Finally return 0 for successful finish 
	return root; 
} 

// A utility function to create a dummy tree shown in above diagram 
Node *createDummyTree() 
{ 
	Node *root = newNode('A'); 
	root->child[0] = newNode('B'); 
	root->child[1] = newNode('C'); 
	root->child[2] = newNode('D'); 
	root->child[0]->child[0] = newNode('E'); 
	root->child[0]->child[1] = newNode('F'); 
	root->child[2]->child[0] = newNode('G'); 
	root->child[2]->child[1] = newNode('H'); 
	root->child[2]->child[2] = newNode('I'); 
	root->child[2]->child[3] = newNode('J'); 
	root->child[0]->child[1]->child[0] = newNode('K'); 
	return root; 
} 

// A utlity function to traverse the constructed N-ary tree 
void traverse(Node *root) 
{ 
	if (root) 
	{ 
		printf("%c ", root->key); 
		for (int i = 0; i < N; i++) 
			traverse(root->child[i]); 
	} 
} 

// Driver program to test above functions 
int main() 
{ 
	// Let us create an N-ary tree shown in above diagram 
	Node *root = createDummyTree(); 
    string s;
	serialize(root, s); 
    cout<<s<<"\n";
	// Let us deserialize the storeed tree into root1
	int x=0;
    root = deSerialize(x,s);

	printf("Constructed N-Ary Tree from file is \n"); 
	traverse(root);

	return 0; 
}
