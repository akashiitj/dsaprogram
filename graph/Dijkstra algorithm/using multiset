#include<bits/stdc++.h>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;

ll mod = 1000000007;

//cout<<fixed<<setprecision(6)<<ans<<"\n";

#define frmlty     int test_case;cin>>test_case;while(test_case--)

#define vi        vector<int>
#define vs        vector<string>
#define vll       vector<ll>
#define pii       pair<int,int>

#define msi       map<string,int>
#define msit      map<string,int>::iterator
#define pb        push_back
#define mp        make_pair

#define loop(i, a, b)      for(int i=a;i<b;i++)
#define rloop(i, a, b)     for(int i=b-1;i>=a;i--)

#define gcd(a, b)  __gcd(a,b)
#define maX(a, b)                     ( (a) > (b) ? (a) : (b))
#define miN(a, b)                     ( (a) < (b) ? (a) : (b))

#define le(x) scanf("%d",&x);
#define le2(x, y) scanf("%d%d",&x,&y);
#define lell(x) scanf("%lld",&x);
#define le2ll(x, y) scanf("%lld%lld",&x,&y);

#define F first
#define S second

int n;

multiset <pii> mi;//min priority q functionality using set

vector <pii> g[100];
int vis[100];
int mindis[100];


int infi = INT_MAX;


void da(int sv) {
    pii curNode;
    int adjNodeIndex, curNodeIndex;
    while (!mi.isEmpty()) {
        curNode = *mi.begin();
        mi.erase(mi.begin());
        curNodeIndex = curNode.second;
        if (vis[curNodeIndex]) continue;
        vis[curNodeIndex] = 1;
        loop(i, 0, g[curNodeIndex].size()) {
            int adjNodeIndex = g[curNodeIndex][i].second;
            if (mindis[adjNodeIndex] > mindis[curNode.second] + g[curNodeIndex][i].first) {
                mindis[adjNodeIndex] = mindis[curNodeIndex] + g[curNodeIndex][i].first;
                mi.insert({mindis[adjNodeIndex], adjNodeIndex});
            }
        }
    }
}

int main() {
    cin >> n;
    while (true) {
        int v1, v2, d;
        cin >> v1;
        if (v1 == -1)break;
        cin >> v2 >> d;
        g[v1].pb(mp(d, v2));
    }

    loop(i, 1, n + 1) {
        mindis[i] = infi;
        vis[i] = 0;
    }

    int sv;
    le(sv);
    mi.insert(mp(0, sv));
    mindis[sv] = 0;
    da(sv);

    loop(i, 1, n + 1) {
        cout << mindis[i] << " ";

    }
    cout << "\n";
    return 0;
}

4
1 2 2
1 3 5
2 3 1
2 4 4
3 4 1
1
